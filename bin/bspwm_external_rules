#!/bin/sh

# Manual tiling
# =============

# Spawn window on the newest receptacle or preselection and switch focus
# to it.  For presels priority is given to the current desktop.
_bspc_query() {
	bspc query -N -n "$@"
}

recept="$(_bspc_query 'any.leaf.!window')"
presel="$(_bspc_query 'newest.!automatic')"

# Receptacles will not switch focus to the present desktop, whereas
# preselection will.  This way we can develop different workflows (e.g.
# create 3 recept in one desktop, launch 3 GUIs that take time to load,
# switch to another desktop and continue working, until you decide to go
# back to the GUIs).  This has no effect when all actions occur within
# the focused desktop.
if [ -n "$recept" ]; then
	target="$recept"
	attention="off"
elif [ -n "$presel" ]; then
	target="$presel"
fi

echo "node=${target:-focused}"
echo "follow=${attention:-on}"

# Window rules
# ============

# Operate on windows based on their properties.  The positional
# arguments are defined in the `external_rules_command` of `man bspc`.
window_id="$1"
window_class="$2"
window_instance="$3"
window_title="$(xwininfo -id "$window_id" | sed ' /^xwininfo/!d ; s,.*"\(.*\)".*,\1,')"

case "$window_class" in
	[Mm]pv|[Vv]lc|[Pp]avucontrol|[Ee]o[mg]|[Ff]eh|[Rr]istretto|[Ss]xiv|my_float_window)
		echo "state=floating"
		echo "center=on"
		;;
    [Mm]ate-calc)
		echo "state=pseudo_tiled"
        ;;
	* )
		case "$(xprop -id "$window_id" _NET_WM_WINDOW_TYPE)" in
			*_NET_WM_WINDOW_TYPE_DIALOG*)
				echo "state=floating"
				;;
			*)
				echo "state=tiled"
				;;
		esac
		;;
esac

# FIXME the "file operations" applies to the `caja` file manager.
# TODO There should be a better way of handling this.
case "$window_title" in
	'File Operations'*)
		echo "state=floating"
		echo "center=on"
		;;
	my_float_window)
		echo "state=floating"
		;;
esac

